{"version":3,"sources":["Source.js","App.js","reportWebVitals.js","index.js"],"names":["sources","label","method","value","nop","newRow","plat","token","usd","platform","toLowerCase","fetch_from","entry","a","undefined","source","find","e","type","Error","key","console","log","params","join","fetch","resp","json","status","results","platforms","fetch_vault","map","item","deposit_usd","reward_usd","total","Object","entries","f","flat","balance","Math","pow","get_price_usd","price","symbol","headers","accept","req","isEntryEqual","e1","e2","emptyEntry","SelectList","onChange","className","defaultValue","target","s","toUpperCase","Source","onSubmit","onDelete","useState","defaultEntry","local","setLocal","buttonText","preventDefault","newEntry","t","k","changeKey","size","placeholder","onClick","aria-label","aria-hidden","entriesKey","Config","newConfigCallback","setEntries","useEffect","localStorage","getItem","savedEntries","JSON","parse","stringify","setItem","updateAndSend","newEntries","submitEntry","old","idx","findIndex","push","deleteEntry","splice","length","Click","removeItem","resultsKey","Stats","reduce","acc","row","toFixed","data","App","setResults","savedResults","all","arr","fn","Promise","res","fetchAndProcess","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.cf31c042.chunk.js","sourcesContent":["const sources = [\n  { label: \"Yieldwatch (BSC)\", method: fetch_yieldwatch },\n  { label: \"Filfox (FIL)\", method: fetch_fil },\n  { label: \"Kraken\", value:  nop },\n  { label: \"Binance\", value: nop  }\n];\n\nconst newRow = (plat,token,usd)  => { \n    return {\n        platform: plat.toLowerCase(),\n        token:token.toLowerCase(),\n        usd:usd\n    }; \n};\n\nasync function fetch_from(entry) {\n    const source = sources.find(e => e.label === entry.type);\n    if (source === undefined) {\n        throw new Error(\"Error undefined source\", entry);\n    }\n    return await source.method(entry.key);\n}\n\nasync function fetch_yieldwatch(key) {\n    console.log(\"YieldWatch fetching\"); \n    const platforms_url = [\"beefy\",\"pancake\",\"auto\",\"bunny\"];\n    const params = platforms_url.join(\",\");\n    const resp = await fetch(`https://www.yieldwatch.net/api/all/${key}?platforms=${params}`);\n    const json = await resp.json();\n    if (json.status === \"0\") {\n        throw new Error(\"Invalid request (maybe invalid address?\");\n    }\n    const results = json[\"result\"]; \n    const fetch_vault = (plat) => {\n        return results[plat][\"vaults\"][\"vaults\"].map(item => {\n            const deposit_usd = item[\"priceInUSDDepositToken\"];\n            const reward_usd = item[\"priceInUSDRewardToken\"];\n            const current_tokens = item[\"currentTokens\"];\n            const pending_rewards = item[\"pendingRewards\"];\n            const total = deposit_usd * current_tokens + reward_usd * pending_rewards;\n            return newRow(plat, item[\"depositToken\"], total);\n        });\n    };\n    const fetch_stake = (plat) => {\n        return results[plat][\"staking\"][\"vaults\"].map(item => {\n            const usd_price = item[\"priceInUSDDepositToken\"]\n            const deposited = item[\"depositedTokens\"]\n            const pending = item[\"pendingRewards\"]\n            const total = usd_price * (deposited + pending)\n            return newRow(plat, item[\"depositToken\"], total);\n        });\n    };\n    const platforms = { // TODO more\n        \"bunny\": [fetch_vault,fetch_stake],\n        \"Autofarm\": [fetch_vault]\n    }; \n    return Object.entries(platforms).map(([plat, fetches]) => {\n        return fetches.map(f => f(plat)).flat()\n    }).flat()\n}\n\nasync function fetch_fil(key) {\n    const resp = await fetch(`https://filfox.info/api/v1/address/${key}`);\n    const json = await resp.json();\n    if (json[\"statusCode\"]) {\n        throw new Error(\"Invalid FIL request\");\n    }\n    const balance = json[\"balance\"] / Math.pow(10,18);\n    const price = await get_price_usd(\"filecoin\");\n    return newRow(\"FIL\", \"FIL\", balance * price);\n}\n\nasync function get_price_usd(symbol) {\n    const req = await fetch(`https://api.coingecko.com/api/v3/coins/${symbol}?tickers=true&community_data=false&developer_data=false&sparkline=false`, \n        { headers: { accept : \"application/json\" }});\n    const json = await req.json();\n    return json[\"market_data\"][\"current_price\"][\"usd\"];\n}\n\nasync function nop() {\n    console.log(\"NOT IMPLEMENTED YET\");\n    return [];\n}\nexport {\n    sources,\n    fetch_from,\n}\n//exports.sources = sources;\n//exports.fetch_from = fetch_from;\n","import './App.css';\nimport React, { useState, useEffect } from 'react';\nimport { sources, fetch_from } from './Source.js';\nimport { CSVLink } from \"react-csv\";\n\n// a source entry is { type: <type>, key: <key> }\nconst isEntryEqual = (e1,e2) => e1.type === e2.type && e1.key === e2.key;\nconst newEntry = (t,k) => { return { type: t, key: k }; };\nconst emptyEntry = newEntry(\"\",\"\");\n\nconst SelectList = ({entry,onChange}) => {\n    return (\n    <>\n        <label  className=\"col-md-1\">Source</label>\n        <select className=\"form-control col-md-3\" \n            value={entry.type} \n            defaultValue={sources[0].label}\n            onChange={e => onChange(e.target.value)}>\n            { sources.map(s => \n            <option value={s.label}> \n                {s.label.toUpperCase()} \n            </option>) }\n        </select>\n    </>\n    );\n\n};\n\nfunction Source({entry,onSubmit,onDelete}) {\n    const defaultEntry = () => {\n        var e = {...entry};\n        if (entry === undefined || entry.type === \"\") {\n            e.type = sources[0].label;\n        } \n        return e;\n    }\n    const [local,setLocal] = useState(defaultEntry());\n    const changeType = (t) => {\n        local.type = t;\n        setLocal({...local});\n    };\n    const changeKey = (k) => {\n        local.key = k;\n        setLocal({...local});\n    };\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        const newEntry = local;\n        console.log(\"OLD ENTRY \",entry,\" => NEW ENTRY (type\",entry.type,\") : \",newEntry);\n        onSubmit(entry,newEntry);\n        setLocal(newEntry(\"\",\"\"));\n    };\n\n    console.log(\"NEW RENDER : type\",local.type);\n    const buttonText = isEntryEqual(entry,emptyEntry) ? \"Add Source\" : \"Update\";\n    //const optionsDict = sources.map(e => {e.type: e.type.toUpperCase() });\n\n    return (\n        <div className='row'>\n            <form className= \"form-inline well\" onSubmit={handleSubmit}>\n                <div className=\"form-group\">\n                    <SelectList entry={local} onChange={changeType} />\n                    <input\n                      value={local.key}\n                      onChange={e => changeKey(e.target.value)}\n                      type='text'\n                      size=\"50\"\n                      className='form-control col-md-5 col-md-offset-4'\n                      placeholder='Enter API / Public key'\n                    />\n\n                    <button className='btn btn-primary col-md-2'>\n                        {buttonText}\n                    </button>\n                    <button type=\"button\" \n                        // we pass the entry we've been given as this how the\n                        // config  looks up for the index to remove in the list\n                        // TODO : maybe give an ID to each entry ?\n                        onClick={() => onDelete(entry)}    \n                        className=\"close col-md-1\" \n                        aria-label=\"Delete\">\n                      <span aria-hidden=\"true\">&times;</span>\n                    </button>\n                </div>\n            </form> \n        </div>\n    );\n}\n\nconst entriesKey = \"sources\";\n\nfunction Config({newConfigCallback}) {\n    // contains the list of entries with always an empty entry\n    const [entries,setEntries] = useState([]);\n\n    useEffect(() => {\n        // load entries only at the beginning\n        const json = localStorage.getItem(entriesKey);\n        const savedEntries = JSON.parse(json);\n        if (savedEntries) {\n            console.log(\"LOADED entries from storage \",savedEntries);\n            setEntries(savedEntries);\n        }\n    },[]);\n\n    useEffect(() => {\n        const json = JSON.stringify(entries);\n        localStorage.setItem(entriesKey,json);\n        newConfigCallback(entries); \n        console.log(\"SAVED entries to storage\", entries);\n    },[entries])\n\n    const updateAndSend = () => {\n        const newEntries = [...entries];\n        setEntries(newEntries);\n    };\n        \n    const submitEntry = (old,newEntry) => {\n        let idx = entries.findIndex(e => isEntryEqual(old,e));\n        if (idx !== -1) { // entry is being updated\n            entries[idx] = newEntry;\n        } else { // entry is being created for the first time\n            entries.push(newEntry);\n            console.log(\"INSERTING new entry at \",idx,\" => \",entries);\n        }\n        updateAndSend();\n    };\n\n    const deleteEntry = (entry) => {\n        console.log(\"DELETE ENTRY \",entry,\" ON \",entries);\n        let idx = entries.findIndex(e => isEntryEqual(entry,e));\n        if (idx === -1) {\n            // silent return because the entry is the empty one\n            return; \n        }\n        entries.splice(idx,1);\n        console.log(\"DELETE ENTRY NEW STATE\",entries);\n        updateAndSend();\n    }\n\n    const deleteConfig = () => localStorage.removeItem(entriesKey);\n\n    console.log(\"ENTRIES SIZE: \",entries.length, \" ==> \",entries);\n    return (\n        <div className=\"Config\"> \n        <div className=\"row\">\n            <button className=\"btc btn-danger\" Click={deleteConfig}> Delete Config </button>\n        </div>\n        <div className=\"row\">\n        {\n            entries.map(e => \n                <Source \n                    key={JSON.stringify(e)}\n                    entry={e}\n                    onSubmit={submitEntry} \n                    onDelete={deleteEntry}\n                />\n            )\n        }\n        {\n            <Source \n                key={JSON.stringify(emptyEntry)}\n                entry={emptyEntry}\n                onSubmit={submitEntry} \n                onDelete={deleteEntry}\n            />\n        }\n        </div>\n        </div>\n    );\n}\n\nconst resultsKey = \"results\";\n\nfunction Stats({results}) {\n    const total = results.reduce((acc,row) => acc + row.usd,0);\n\n    return (\n       <div>\n            <div className=\"row\">\n                You got {total.toFixed(2)} dollars in there !\n            </div>\n            <div className=\"row\">\n                <CSVLink data={results}>Download CSV results</CSVLink>;   \n            </div>\n        </div>\n\n    );\n}\n\nfunction asyncMap(arr, fn) {\n  return Promise.all(arr.map(fn));\n}\n\nfunction App() {\n    const [results,setResults] = useState([]);\n\n    useEffect(() => {\n        const json = localStorage.getItem(resultsKey);\n        const savedResults = JSON.parse(json);\n        if (savedResults) {\n            setResults(savedResults)\n        }\n    },[]);\n\n    useEffect(() => {\n        const json = JSON.stringify(results);\n        localStorage.setItem(resultsKey,json);\n    },[results]);\n\n    const newConfig = (entries) => {\n        console.log(\"NEW ENTRIES SETUP: \",entries);\n        const fetchAndProcess = async (all) => {\n            const res = (await asyncMap(entries,fetch_from)).flat();\n            console.log(\"NEW RESULTS\",res);\n            setResults(res);\n        };\n        fetchAndProcess(entries);\n    };\n\n\n  return (\n    <div className=\"row\">\n        <div className=\"col-md-8 mx-auto\">\n            <header className=\"App-header\">\n            <p>\n                Crypto Summary\n            </p>\n            </header>\n            <Config newConfigCallback={newConfig} />\n            <Stats results={results} />\n        </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}